{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92833aa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-30T22:04:35.000022Z",
     "iopub.status.busy": "2024-11-30T22:04:34.999613Z",
     "iopub.status.idle": "2024-11-30T22:05:00.833823Z",
     "shell.execute_reply": "2024-11-30T22:05:00.832658Z"
    },
    "papermill": {
     "duration": 25.841712,
     "end_time": "2024-11-30T22:05:00.836486",
     "exception": false,
     "start_time": "2024-11-30T22:04:34.994774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/albumentations/__init__.py:13: UserWarning: A new version of Albumentations is available: 1.4.21 (you have 1.4.17). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\n",
      "  check_for_updates()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['aptos2019-blindness-detection']\n"
     ]
    }
   ],
   "source": [
    "import os, sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from math import sqrt\n",
    "import cv2\n",
    "import math\n",
    "import torch\n",
    "import torch.fft\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "from sklearn.model_selection import train_test_split\n",
    "import albumentations as A\n",
    "from albumentations import(\n",
    "    Compose, HorizontalFlip, VerticalFlip, RandomRotate90, ShiftScaleRotate,\n",
    "    RandomBrightnessContrast, HueSaturationValue)\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import pytorch_lightning as pl\n",
    "from pytorch_lightning.callbacks import EarlyStopping, ModelCheckpoint, RichModelSummary\n",
    "from pytorch_lightning.loggers import TensorBoardLogger\n",
    "from torchmetrics import F1Score, Accuracy\n",
    "import torchvision\n",
    "from torchvision.models import resnet18\n",
    "from torchvision import transforms\n",
    "from torchvision import models\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.utils.multiclass import unique_labels\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "img_size = (224, 224)\n",
    "\n",
    "os.chdir(\"../input\")\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "label_title = {\"0\" : \"No DR\",\"1\" : \"Mild\",\"2\" : \"Moderate\",\"3\" :\"Severe\",\"4\" : \"Proliferative DR\"}\n",
    "class_labels=[\"No DR\",\"Mild\",\"Moderate\",\"Severe\",\"Proliferative DR\"]\n",
    "\n",
    "print(os.listdir(\"../input\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d65b8efd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-30T22:05:00.843704Z",
     "iopub.status.busy": "2024-11-30T22:05:00.842271Z",
     "iopub.status.idle": "2024-11-30T22:05:00.850133Z",
     "shell.execute_reply": "2024-11-30T22:05:00.848957Z"
    },
    "papermill": {
     "duration": 0.013398,
     "end_time": "2024-11-30T22:05:00.852339",
     "exception": false,
     "start_time": "2024-11-30T22:05:00.838941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['aptos2019-blindness-detection']\n"
     ]
    }
   ],
   "source": [
    "import os, sys\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "label_title = {\"0\" : \"No DR\",\"1\" : \"Mild\",\"2\" : \"Moderate\",\"3\" :\"Severe\",\"4\" : \"Proliferative DR\"}\n",
    "class_labels=[\"No DR\",\"Mild\",\"Moderate\",\"Severe\",\"Proliferative DR\"]\n",
    "os.chdir(\"../input\")\n",
    "#os.listdir('/kaggle/input/aptos2019-blindness-detection')\n",
    "print(os.listdir(\"../input\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fddf3d2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-30T22:05:00.858111Z",
     "iopub.status.busy": "2024-11-30T22:05:00.857721Z",
     "iopub.status.idle": "2024-11-30T22:05:01.592124Z",
     "shell.execute_reply": "2024-11-30T22:05:01.591032Z"
    },
    "papermill": {
     "duration": 0.739919,
     "end_time": "2024-11-30T22:05:01.594378",
     "exception": false,
     "start_time": "2024-11-30T22:05:00.854459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_raw_data = pd.read_csv(\"../input/aptos2019-blindness-detection/train.csv\")\n",
    "train_raw_data[\"filename\"] = train_raw_data[\"id_code\"].map(lambda x:os.path.join(\"../input/aptos2019-blindness-detection/train_images\",x+\".png\"))\n",
    "train_raw_data.diagnosis.hist()\n",
    "\n",
    "test_raw_data = pd.read_csv(\"../input/aptos2019-blindness-detection/test.csv\")\n",
    "test_raw_data[\"filename\"] = test_raw_data[\"id_code\"].map(lambda x:os.path.join(\"../input/aptos2019-blindness-detection/test_images\",x+\".png\"))\n",
    "\n",
    "submission = pd.read_csv(\"../input/aptos2019-blindness-detection/sample_submission.csv\")\n",
    "submission[\"filename\"] = submission[\"id_code\"].map(lambda x:os.path.join(\"../input/aptos2019-blindness-detection/train_images\",x+\".png\"))\n",
    "\n",
    "plt.title('Distribution of Diagnoses')\n",
    "plt.xlabel('Diagnosis')\n",
    "plt.ylabel('Frequency')\n",
    "plt.xticks(range(5), class_labels)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 875431,
     "sourceId": 14774,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 32.456833,
   "end_time": "2024-11-30T22:05:04.701189",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-30T22:04:32.244356",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
